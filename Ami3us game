import pygame
import sys
import random

pygame.init()

screen_width, screen_height = 800, 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Breakout Game")

clock = pygame.time.Clock()
fps = 60

white = (255, 255, 255)
black = (0, 0, 0)
blue = (0, 0, 255)
red = (255, 0, 0)
moonlight_yellow = (255, 223, 186)

background = pygame.image.load("background.jpg")
background = pygame.transform.scale(background, (screen_width, screen_height))

heart_image = pygame.image.load("heart.png")
heart_image = pygame.transform.scale(heart_image, (30, 30))

paddle_sound = pygame.mixer.Sound("hit-94706.mp3")
brick_sound = pygame.mixer.Sound("hit-rock-01-266301.mp3")

ball_radius = 10
ball_speed_x = 4
ball_speed_y = 4

paddle_width = 100
paddle_height = 10
paddle_y = screen_height - 30
paddle_speed = 6

brick_width = 40
brick_height = 15

bricks = []
lives = 3
level = 1

def create_bricks(level):
    bricks.clear()
    rows = 3 + level
    cols = 10 + level
    for row in range(rows):
        for col in range(cols):
            brick_x = col * (brick_width + 5) + 30
            brick_y = row * (brick_height + 5) + 50
            bricks.append(pygame.Rect(brick_x, brick_y, brick_width, brick_height))

def draw_hearts():
    for i in range(lives):
        screen.blit(heart_image, (10 + i * 40, 10))

def show_menu():
    global level
    while True:
        screen.fill(black)
        font = pygame.font.Font(None, 74)
        title_text = font.render("Breakout Game", True, white)
        screen.blit(title_text, (screen_width // 2 - title_text.get_width() // 2, 100))

        font = pygame.font.Font(None, 50)
        start_text = font.render("Start", True, blue)
        continue_text = font.render("Level", True, moonlight_yellow)
        exit_text = font.render("Quit Game", True, red)

        screen.blit(start_text, (screen_width // 2 - start_text.get_width() // 2, 200))
        screen.blit(continue_text, (screen_width // 2 - continue_text.get_width() // 2, 300))
        screen.blit(exit_text, (screen_width // 2 - exit_text.get_width() // 2, 400))

        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = pygame.mouse.get_pos()
                if (screen_width // 2 - start_text.get_width() // 2 <= mouse_x <= screen_width // 2 + start_text.get_width() // 2 and
                        200 <= mouse_y <= 200 + start_text.get_height()):
                    level = 1
                    return
                if (screen_width // 2 - continue_text.get_width() // 2 <= mouse_x <= screen_width // 2 + continue_text.get_width() // 2 and
                        300 <= mouse_y <= 300 + continue_text.get_height()):
                    choose_level()
                    return
                if (screen_width // 2 - exit_text.get_width() // 2 <= mouse_x <= screen_width // 2 + exit_text.get_width() // 2 and
                        400 <= mouse_y <= 400 + exit_text.get_height()):
                    pygame.quit()
                    sys.exit()

def choose_level():
    global level
    while True:
        screen.fill(black)
        font = pygame.font.Font(None, 74)
        level_text = font.render("Choose Level", True, white)
        screen.blit(level_text, (screen_width // 2 - level_text.get_width() // 2, 100))

        font = pygame.font.Font(None, 50)
        levels = []
        for i in range(1, 6):
            level_option = font.render(f"Level {i}", True, blue if i == 1 else moonlight_yellow if i == 2 else red)
            screen.blit(level_option, (screen_width // 2 - level_option.get_width() // 2, 150 + i * 50))
            levels.append((level_option, 150 + i * 50))

        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = pygame.mouse.get_pos()
                for i, (text_surface, y) in enumerate(levels, start=1):
                    if (screen_width // 2 - text_surface.get_width() // 2 <= mouse_x <= screen_width // 2 + text_surface.get_width() // 2 and
                            y <= mouse_y <= y + text_surface.get_height()):
                        level = i
                        return

def main_game_loop():
    global ball_x, ball_y, ball_speed_x, ball_speed_y, paddle_x, lives, level

    ball_x = screen_width // 2
    ball_y = screen_height // 2
    paddle_x = (screen_width // 2) - (paddle_width // 2)
    lives = 3

    create_bricks(level)

    running = True
    while running:
        screen.blit(background, (0, 0))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and paddle_x > 0:
            paddle_x -= paddle_speed
        if keys[pygame.K_RIGHT] and paddle_x < screen_width - paddle_width:
            paddle_x += paddle_speed

        ball_x += ball_speed_x
        ball_y += ball_speed_y

        if ball_x - ball_radius < 0 or ball_x + ball_radius > screen_width:
            ball_speed_x *= -1
        if ball_y - ball_radius < 0:
            ball_speed_y *= -1
        if ball_y + ball_radius > screen_height:
            lives -= 1
            if lives <= 0:
                return
            else:
                ball_x, ball_y = screen_width // 2, screen_height // 2

        paddle_rect = pygame.Rect(paddle_x, paddle_y, paddle_width, paddle_height)
        if paddle_rect.collidepoint(ball_x, ball_y):
            ball_speed_y *= -1
            paddle_sound.play()

        for brick in bricks[:]:
            if brick.collidepoint(ball_x, ball_y):
                bricks.remove(brick)
                ball_speed_y *= -1
                brick_sound.play()
                break

        if not bricks:
            level += 1
            create_bricks(level)

        pygame.draw.circle(screen, white, (ball_x, ball_y), ball_radius)
        pygame.draw.rect(screen, blue, paddle_rect)
        for brick in bricks:
            pygame.draw.rect(screen, moonlight_yellow, brick)
        draw_hearts()

        pygame.display.flip()
        clock.tick(fps)

# Game loop
while True:
    show_menu()
    main_game_loop()
